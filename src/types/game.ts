/**
 * @fileoverview Core Game Type Definitions
 * 
 * This file contains all the TypeScript interfaces, enums, and types used throughout
 * the game. These definitions establish the data structures for cards, enemies,
 * players, game state, and all game mechanics.
 * 
 * Key concepts:
 * - Cards: Player cards with effects, costs, and types
 * - Enemies: AI opponents with intents and monster cards
 * - Game State: Complete state of the current game session
 * - Status Effects: Temporary buffs/debuffs applied to entities
 * - Relics: Permanent items that provide passive effects
 * 
 * @example
 * ```typescript
 * import { Card, Enemy, GameState, CardType } from './types/game';
 * 
 * // Create a basic attack card
 * const strike: Card = {
 *   id: 'strike_1',
 *   baseId: 'strike',
 *   name: 'Strike',
 *   cost: 1,
 *   type: CardType.ATTACK,
 *   rarity: CardRarity.COMMON,
 *   description: 'Deal 6 damage',
 *   damage: 6
 * };
 * ```
 * 
 * @since v1.0.0
 * @author Development Team
 */

/**
 * Represents a card that can be played by the player.
 * 
 * Cards are the primary way players interact with the game. Each card has
 * a cost, type, and various effects that can be triggered when played.
 * 
 * @interface Card
 * @property {string} id - Unique identifier for this specific card instance
 * @property {string} baseId - Base identifier for the card type (used for upgrades)
 * @property {string} name - Display name of the card
 * @property {number | 'X'} cost - Energy cost to play the card ('X' for variable cost)
 * @property {CardType} type - Category of the card (attack, skill, power)
 * @property {CardRarity} rarity - Rarity level affecting reward generation
 * @property {string} description - Text description of what the card does
 * @property {number} [damage] - Base damage dealt by the card
 * @property {number} [block] - Block generated by the card
 * @property {CardEffect[]} [effects] - Additional effects beyond damage/block
 * @property {boolean} [upgraded] - Whether this card has been upgraded
 * 
 * @example
 * ```typescript
 * const strike: Card = {
 *   id: 'strike_1',
 *   baseId: 'strike',
 *   name: 'Strike',
 *   cost: 1,
 *   type: CardType.ATTACK,
 *   rarity: CardRarity.COMMON,
 *   description: 'Deal 6 damage',
 *   damage: 6
 * };
 * ```
 */
export interface Card {
  id: string;
  baseId: string;
  name: string;
  cost: number | 'X';
  type: CardType;
  rarity: CardRarity;
  description: string;
  damage?: number;
  block?: number;
  effects?: CardEffect[];
  upgraded?: boolean;
}

/**
 * Represents a card that can be played by enemies.
 * 
 * Monster cards are similar to player cards but are used by enemies during
 * their turns. They have priority values that determine which card an enemy
 * is more likely to play.
 * 
 * @interface MonsterCard
 * @property {string} id - Unique identifier for this monster card
 * @property {string} baseId - Base identifier for the card type
 * @property {string} name - Display name of the monster card
 * @property {MonsterCardType} type - Category of the monster card
 * @property {string} description - Text description of what the card does
 * @property {number} [damage] - Base damage dealt by the card
 * @property {number} [block] - Block generated by the card
 * @property {CardEffect[]} [effects] - Additional effects beyond damage/block
 * @property {number} priority - Higher values make this card more likely to be chosen
 * 
 * @example
 * ```typescript
 * const enemyAttack: MonsterCard = {
 *   id: 'enemy_strike',
 *   baseId: 'enemy_strike',
 *   name: 'Strike',
 *   type: MonsterCardType.ATTACK,
 *   description: 'Deal 8 damage',
 *   damage: 8,
 *   priority: 5
 * };
 * ```
 */
export interface MonsterCard {
  id: string;
  baseId: string;
  name: string;
  type: MonsterCardType;
  description: string;
  damage?: number;
  block?: number;
  effects?: CardEffect[];
  priority: number; // Higher priority cards are more likely to be chosen
}

/**
 * Defines the three main categories of player cards.
 * 
 * Each card type has different characteristics and synergies:
 * - ATTACK: Deal damage to enemies
 * - SKILL: Provide utility, block, or status effects
 * - POWER: Provide ongoing effects that persist across turns
 * 
 * @enum {string}
 */
export enum CardType {
  /** Cards that primarily deal damage to enemies */
  ATTACK = 'attack',
  /** Cards that provide utility, block, or status effects */
  SKILL = 'skill',
  /** Cards that provide ongoing effects across multiple turns */
  POWER = 'power'
}

/**
 * Defines the categories of monster cards that enemies can play.
 * 
 * Monster cards follow a similar pattern to player cards but are designed
 * for AI opponents with different balance considerations.
 * 
 * @enum {string}
 */
export enum MonsterCardType {
  /** Cards that deal damage to the player */
  ATTACK = 'attack',
  /** Cards that generate block for the enemy */
  DEFEND = 'defend',
  /** Cards that provide positive status effects to the enemy */
  BUFF = 'buff',
  /** Cards that apply negative status effects to the player */
  DEBUFF = 'debuff',
  /** Cards with unique or special effects */
  SPECIAL = 'special'
}

/**
 * Defines the rarity levels of cards, affecting their appearance in rewards.
 * 
 * Rarer cards are generally more powerful but appear less frequently
 * in card rewards and shops.
 * 
 * @enum {string}
 */
export enum CardRarity {
  /** Most common cards, appear frequently in rewards */
  COMMON = 'common',
  /** Uncommon cards, appear occasionally in rewards */
  UNCOMMON = 'uncommon',
  /** Rare cards, appear infrequently in rewards */
  RARE = 'rare'
}

/**
 * Represents an effect that can be applied by a card.
 * 
 * Card effects are the building blocks of card functionality. They define
 * what happens when a card is played, such as dealing damage, applying
 * status effects, or modifying game state.
 * 
 * @interface CardEffect
 * @property {EffectType} type - The type of effect to apply
 * @property {number} value - The base value of the effect
 * @property {number} [multiplier] - Optional multiplier for the effect value
 * @property {TargetType} target - What the effect targets
 * @property {StatusType} [statusType] - Type of status effect to apply (if applicable)
 * 
 * @example
 * ```typescript
 * const poisonEffect: CardEffect = {
 *   type: EffectType.APPLY_STATUS,
 *   value: 3,
 *   target: TargetType.ENEMY,
 *   statusType: StatusType.POISON
 * };
 * ```
 */
export interface CardEffect {
  type: EffectType;
  value: number;
  multiplier?: number;
  target: TargetType;
  statusType?: StatusType;
}

/**
 * Defines all possible effect types that can be applied by cards, relics, and powers.
 * 
 * These effects cover all the mechanical interactions in the game, from
 * basic damage and healing to complex status effects and energy manipulation.
 * 
 * @enum {string}
 */
export enum EffectType {
  /** Deal damage to a target */
  DAMAGE = 'damage',
  /** Deal damage multiplied by current block */
  DAMAGE_MULTIPLIER_BLOCK = 'damage_multiplier_block',
  /** Deal damage multiplied by current energy */
  DAMAGE_MULTIPLIER_ENERGY = 'damage_multiplier_energy',
  /** Generate block (damage reduction) */
  BLOCK = 'block',
  /** Restore health to the player */
  HEAL = 'heal',
  /** Draw additional cards */
  DRAW_CARDS = 'draw_cards',
  /** Gain energy for this turn */
  GAIN_ENERGY = 'gain_energy',
  /** Lose energy for this turn */
  LOSE_ENERGY = 'lose_energy',
  /** Apply a status effect to a target */
  APPLY_STATUS = 'apply_status',
  /** Add a card to the discard pile */
  ADD_CARD_TO_DISCARD = 'add_card_to_discard',
  /** Upgrade a card in the deck */
  UPGRADE_CARD = 'upgrade_card'
}

/**
 * Defines what a card effect can target.
 * 
 * Targeting determines who or what is affected by card effects.
 * 
 * @enum {string}
 */
export enum TargetType {
  /** Target the player (self) */
  SELF = 'self',
  /** Target a single enemy */
  ENEMY = 'enemy',
  /** Target all enemies */
  ALL_ENEMIES = 'all_enemies'
}

/**
 * Represents an enemy in combat.
 * 
 * Enemies are AI opponents that the player fights. Each enemy has health,
 * an intent (what they plan to do next turn), and a deck of monster cards
 * they can play.
 * 
 * @interface Enemy
 * @property {string} id - Unique identifier for this enemy
 * @property {string} name - Display name of the enemy
 * @property {number} health - Current health points
 * @property {number} maxHealth - Maximum health points
 * @property {number} block - Current block (damage reduction)
 * @property {EnemyIntent} intent - What the enemy plans to do next turn
 * @property {StatusEffect[]} statusEffects - Active status effects on the enemy
 * @property {boolean} [isElite] - Whether this is an elite enemy (stronger)
 * @property {boolean} [isBoss] - Whether this is a boss enemy
 * @property {MonsterCard[]} deck - Available monster cards the enemy can play
 * @property {MonsterCard} [currentCard] - The card the enemy will play this turn
 * 
 * @example
 * ```typescript
 * const slime: Enemy = {
 *   id: 'acid_slime_1',
 *   name: 'Acid Slime',
 *   health: 65,
 *   maxHealth: 65,
 *   block: 0,
 *   intent: { type: IntentType.DEBUFF, value: 2 },
 *   statusEffects: [],
 *   deck: [/* monster cards *\/]
 * };
 * ```
 */
export interface Enemy {
  id: string;
  name: string;
  health: number;
  maxHealth: number;
  block: number;
  intent: EnemyIntent;
  statusEffects: StatusEffect[];
  isElite?: boolean;
  isBoss?: boolean;
  deck: MonsterCard[];
  currentCard?: MonsterCard;
}

/**
 * Represents what an enemy plans to do on their next turn.
 * 
 * The intent system allows players to see what enemies are planning,
 * enabling strategic decision-making about block, healing, and targeting.
 * 
 * @interface EnemyIntent
 * @property {IntentType} type - The type of action the enemy will take
 * @property {number} [value] - The value associated with the intent (damage, block, etc.)
 * @property {MonsterCard} [card] - The specific monster card that will be played
 * 
 * @example
 * ```typescript
 * const attackIntent: EnemyIntent = {
 *   type: IntentType.ATTACK,
 *   value: 12,
 *   card: attackCard
 * };
 * ```
 */
export interface EnemyIntent {
  type: IntentType;
  value?: number;
  card?: MonsterCard; // The card that will be played this turn
}

/**
 * Defines the types of actions enemies can intend to take.
 * 
 * Intent types help players understand enemy behavior and plan accordingly.
 * 
 * @enum {string}
 */
export enum IntentType {
  /** Enemy will deal damage */
  ATTACK = 'attack',
  /** Enemy will generate block */
  DEFEND = 'defend',
  /** Enemy will apply positive status effects to themselves */
  BUFF = 'buff',
  /** Enemy will apply negative status effects to the player */
  DEBUFF = 'debuff',
  /** Enemy's intent is unknown or hidden */
  UNKNOWN = 'unknown'
}

/**
 * Represents a temporary status effect applied to an entity.
 * 
 * Status effects provide temporary buffs or debuffs that affect combat
 * mechanics. They can be applied to both players and enemies.
 * 
 * @interface StatusEffect
 * @property {StatusType} type - The type of status effect
 * @property {number} stacks - Number of stacks of this effect
 * @property {number} [duration] - How many turns this effect lasts (if not permanent)
 * 
 * @example
 * ```typescript
 * const poison: StatusEffect = {
 *   type: StatusType.POISON,
 *   stacks: 5,
 *   duration: 3
 * };
 * ```
 */
export interface StatusEffect {
  type: StatusType;
  stacks: number;
  duration?: number;
}

/**
 * Defines all possible status effect types.
 * 
 * Status effects can be positive (buffs) or negative (debuffs) and
 * affect various aspects of combat like damage, defense, and energy.
 * 
 * @enum {string}
 */
export enum StatusType {
  /** Deals damage at the start of each turn */
  POISON = 'poison',
  /** Reduces damage dealt by 25% */
  WEAK = 'weak',
  /** Increases damage taken by 50% */
  VULNERABLE = 'vulnerable',
  /** Increases damage dealt by 1 per stack */
  STRENGTH = 'strength',
  /** Increases block generated by 1 per stack */
  DEXTERITY = 'dexterity'
}

/**
 * Represents the player character and their current state.
 * 
 * The player object contains all the information about the player's
 * current stats, resources, and active effects.
 * 
 * @interface Player
 * @property {number} health - Current health points
 * @property {number} maxHealth - Maximum health points
 * @property {number} block - Current block (damage reduction)
 * @property {number} energy - Current energy available this turn
 * @property {number} maxEnergy - Maximum energy per turn
 * @property {StatusEffect[]} statusEffects - Active status effects on the player
 * @property {number} gold - Current gold for purchasing items
 * @property {Relic[]} relics - Permanent items providing passive effects
 * @property {PowerCard[]} powerCards - Active power cards providing ongoing effects
 * 
 * @example
 * ```typescript
 * const player: Player = {
 *   health: 75,
 *   maxHealth: 80,
 *   block: 5,
 *   energy: 3,
 *   maxEnergy: 3,
 *   statusEffects: [],
 *   gold: 150,
 *   relics: [/* collected relics *\/],
 *   powerCards: [/* active powers *\/]
 * };
 * ```
 */
export interface Player {
  health: number;
  maxHealth: number;
  block: number;
  energy: number;
  maxEnergy: number;
  statusEffects: StatusEffect[];
  gold: number;
  relics: Relic[];
  powerCards: PowerCard[];
}

/**
 * Represents the complete state of the current game session.
 * 
 * The game state contains all the information needed to represent
 * the current state of the game, including player, enemies, deck,
 * and current game phase.
 * 
 * @interface GameState
 * @property {Player} player - Current player state
 * @property {Enemy[]} enemies - Current enemies in combat (empty if not in combat)
 * @property {Card[]} hand - Cards currently in the player's hand
 * @property {Card[]} drawPile - Cards remaining to be drawn
 * @property {Card[]} discardPile - Cards discarded this turn
 * @property {Card[]} exhaustPile - Cards permanently removed from the deck
 * @property {TurnPhase} currentTurn - Current turn phase
 * @property {CombatReward} [combatReward] - Rewards from the last combat (if any)
 * @property {GamePhase} gamePhase - Current phase of the game
 * @property {GameMap} [map] - Current map state (if in map phase)
 * @property {Event} [currentEvent] - Current event being processed (if in event phase)
 * @property {Shop} [currentShop] - Current shop being visited (if in shop phase)
 * @property {boolean} [firstAttackThisCombat] - Whether this is the first attack in combat
 * 
 * @example
 * ```typescript
 * const gameState: GameState = {
 *   player: player,
 *   enemies: [enemy1, enemy2],
 *   hand: [card1, card2, card3],
 *   drawPile: [/* remaining cards *\/],
 *   discardPile: [],
 *   exhaustPile: [],
 *   currentTurn: TurnPhase.PLAYER_TURN,
 *   gamePhase: GamePhase.COMBAT
 * };
 * ```
 */
export interface GameState {
  player: Player;
  enemies: Enemy[];
  hand: Card[];
  drawPile: Card[];
  discardPile: Card[];
  exhaustPile: Card[];
  currentTurn: TurnPhase;
  combatReward?: CombatReward;
  gamePhase: GamePhase;
  map?: import('./map').GameMap;
  currentEvent?: import('./map').Event;
  currentShop?: import('./map').Shop;
  firstAttackThisCombat?: boolean;
}

/**
 * Defines the different phases the game can be in.
 * 
 * Game phases determine what the player can do and what UI is displayed.
 * The game transitions between these phases as the player progresses.
 * 
 * @enum {string}
 */
export enum GamePhase {
  /** Title screen - game start */
  TITLE = 'title',
  /** Map view - selecting next node */
  MAP = 'map',
  /** Combat - fighting enemies */
  COMBAT = 'combat',
  /** Card reward screen - choosing cards after combat */
  CARD_REWARD = 'card_reward',
  /** Relic reward screen - choosing relics after boss */
  RELIC_REWARD = 'relic_reward',
  /** Event screen - making choices in events */
  EVENT = 'event',
  /** Shop screen - purchasing cards and relics */
  SHOP = 'shop',
  /** Rest site - healing or upgrading cards */
  REST = 'rest',
  /** Game over screen - player defeated */
  GAME_OVER = 'game_over',
  /** Victory screen - run completed */
  VICTORY = 'victory'
}

/**
 * Defines the phases within a combat turn.
 * 
 * Turn phases control the flow of combat, determining whose turn it is
 * and what actions are available.
 * 
 * @enum {string}
 */
export enum TurnPhase {
  /** Player's turn - can play cards */
  PLAYER_TURN = 'player_turn',
  /** Enemy's turn - enemies take actions */
  ENEMY_TURN = 'enemy_turn',
  /** Combat end - rewards and cleanup */
  COMBAT_END = 'combat_end'
}

/**
 * Represents rewards given after winning a combat encounter.
 * 
 * Combat rewards provide the player with resources to improve their
 * deck and character for future encounters.
 * 
 * @interface CombatReward
 * @property {number} gold - Gold gained from the combat
 * @property {Card[]} cardRewards - Cards available to add to deck
 * @property {Relic} [relicReward] - Relic available to collect (boss fights only)
 * 
 * @example
 * ```typescript
 * const reward: CombatReward = {
 *   gold: 25,
 *   cardRewards: [card1, card2, card3],
 *   relicReward: bossRelic
 * };
 * ```
 */
export interface CombatReward {
  gold: number;
  cardRewards: Card[];
  relicReward?: Relic;
}

/**
 * Represents a permanent item that provides passive effects.
 * 
 * Relics are powerful items that provide ongoing benefits throughout
 * the run. They can trigger on various events and significantly
 * impact gameplay strategy.
 * 
 * @interface Relic
 * @property {string} id - Unique identifier for this relic
 * @property {string} name - Display name of the relic
 * @property {string} description - Text description of what the relic does
 * @property {RelicRarity} rarity - Rarity level of the relic
 * @property {RelicEffect[]} effects - Effects provided by this relic
 * 
 * @example
 * ```typescript
 * const relic: Relic = {
 *   id: 'bronze_scales',
 *   name: 'Bronze Scales',
 *   description: 'When you take damage, deal 3 damage back',
 *   rarity: RelicRarity.COMMON,
 *   effects: [/* relic effects *\/]
 * };
 * ```
 */
export interface Relic {
  id: string;
  name: string;
  description: string;
  rarity: RelicRarity;
  effects: RelicEffect[];
}

/**
 * Represents an effect provided by a relic.
 * 
 * Relic effects define when and how a relic's benefits are applied.
 * They can trigger on various game events and provide different
 * types of effects.
 * 
 * @interface RelicEffect
 * @property {RelicTrigger} trigger - When this effect activates
 * @property {EffectType} effect - The type of effect to apply
 * @property {number} [value] - The value of the effect
 * @property {StatusType} [statusType] - Type of status effect (if applicable)
 * @property {string} [target] - Target of the effect (if not self)
 * 
 * @example
 * ```typescript
 * const relicEffect: RelicEffect = {
 *   trigger: RelicTrigger.DAMAGE_TAKEN,
 *   effect: EffectType.DAMAGE,
 *   value: 3,
 *   target: 'attacker'
 * };
 * ```
 */
export interface RelicEffect {
  trigger: RelicTrigger;
  effect: EffectType;
  value?: number;
  statusType?: StatusType;
  target?: string;
}

/**
 * Defines when relic effects can be triggered.
 * 
 * Relic triggers determine the timing of when a relic's effects
 * are applied, allowing for strategic timing of benefits.
 * 
 * @enum {string}
 */
export enum RelicTrigger {
  /** When combat begins */
  COMBAT_START = 'combat_start',
  /** At the start of each turn */
  TURN_START = 'turn_start',
  /** At the end of each turn */
  TURN_END = 'turn_end',
  /** When a card is played */
  CARD_PLAYED = 'card_played',
  /** When the player takes damage */
  DAMAGE_TAKEN = 'damage_taken',
  /** When an enemy dies */
  ENEMY_DEATH = 'enemy_death',
  /** When resting at a rest site */
  REST = 'rest'
}

/**
 * Defines the rarity levels of relics.
 * 
 * Relic rarity affects how frequently they appear and their power level.
 * Boss relics are special relics that can only be obtained from boss fights.
 * 
 * @enum {string}
 */
export enum RelicRarity {
  /** Most common relics, appear frequently */
  COMMON = 'common',
  /** Uncommon relics, appear occasionally */
  UNCOMMON = 'uncommon',
  /** Rare relics, appear infrequently */
  RARE = 'rare',
  /** Boss relics, only from boss fights */
  BOSS = 'boss',
  /** Starter relics, obtained at the start of the run */
  STARTER = 'starter'
}

/**
 * Represents a power card that provides ongoing effects.
 * 
 * Power cards are special cards that remain active throughout combat,
 * providing persistent effects that trigger on various game events.
 * Unlike regular cards, power cards are not discarded after use.
 * 
 * @interface PowerCard
 * @property {string} id - Unique identifier for this power card
 * @property {string} name - Display name of the power card
 * @property {string} description - Text description of what the power does
 * @property {PowerCardEffect[]} effects - Effects provided by this power card
 * 
 * @example
 * ```typescript
 * const power: PowerCard = {
 *   id: 'strength_power',
 *   name: 'Strength',
 *   description: 'Gain 1 strength at the start of each turn',
 *   effects: [/* power effects *\/]
 * };
 * ```
 */
export interface PowerCard {
  id: string;
  name: string;
  description: string;
  effects: PowerCardEffect[];
}

/**
 * Represents an effect provided by a power card.
 * 
 * Power card effects are similar to relic effects but are provided
 * by power cards instead of relics. They can trigger on various
 * game events and provide ongoing benefits.
 * 
 * @interface PowerCardEffect
 * @property {PowerTrigger} trigger - When this effect activates
 * @property {EffectType} type - The type of effect to apply
 * @property {number} value - The value of the effect
 * @property {TargetType} target - What the effect targets
 * @property {StatusType} [statusType] - Type of status effect (if applicable)
 * 
 * @example
 * ```typescript
 * const powerEffect: PowerCardEffect = {
 *   trigger: PowerTrigger.TURN_START,
 *   type: EffectType.APPLY_STATUS,
 *   value: 1,
 *   target: TargetType.SELF,
 *   statusType: StatusType.STRENGTH
 * };
 * ```
 */
export interface PowerCardEffect {
  trigger: PowerTrigger;
  type: EffectType;
  value: number;
  target: TargetType;
  statusType?: StatusType;
}

/**
 * Defines when power card effects can be triggered.
 * 
 * Power triggers determine the timing of when a power card's effects
 * are applied, similar to relic triggers but specific to power cards.
 * 
 * @enum {string}
 */
export enum PowerTrigger {
  /** At the start of each turn */
  TURN_START = 'turn_start',
  /** At the end of each turn */
  TURN_END = 'turn_end',
  /** When combat begins */
  COMBAT_START = 'combat_start',
  /** When a card is played */
  CARD_PLAYED = 'card_played',
  /** When the player takes damage */
  DAMAGE_TAKEN = 'damage_taken'
} 